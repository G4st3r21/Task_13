package ru.vsu.cs.PoryadinAV;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import ru.vsu.cs.PoryadinAV.utils.SwingUtils;

import javax.swing.*;
import java.awt.*;


public class GameFrame extends JFrame {
    private JPanel panelMain;
    private JLabel labelImg;
    private JButton buttonRestartGame;
    private JButton buttonRed;
    private JButton buttonYellow;
    private JButton buttonMagenta;
    private JButton buttonGreen;
    private JButton buttonOrange;
    private JButton buttonBlue;
    private JLabel labelRealTimeCountNumber;
    private JSpinner spinnerFieldSize;
    private JLabel labelRealTimeCount;

    public GameFrame() {
        this.setTitle("Перекраска");
        this.setContentPane(panelMain);
        this.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        this.pack();

        Colors colors = new Colors();
        Game game = new Game(12);
        spinnerFieldSize.setValue(12);

        GameGraphics gameGraphics = new GameGraphics(12);
        gameGraphics.updateField(game.getField());
        labelImg.setIcon(new ImageIcon(gameGraphics.getImg()));

        labelRealTimeCountNumber.setText("0");

        buttonRed.addActionListener(e -> {
            boolean winGame = game.coloringCells(colors.red);
            gameGraphics.updateField(game.getField());
            labelImg.setIcon(new ImageIcon(gameGraphics.getImg()));
            labelRealTimeCountNumber.setText(Integer.toString(game.getCountOfSteps()));

            if (winGame) {
                showWinMessage();
            }
        });

        buttonOrange.addActionListener(e -> {
            boolean winGame = game.coloringCells(colors.orange);
            gameGraphics.updateField(game.getField());
            labelImg.setIcon(new ImageIcon(gameGraphics.getImg()));
            labelRealTimeCountNumber.setText(Integer.toString(game.getCountOfSteps()));

            if (winGame) {
                showWinMessage();
            }
        });

        buttonMagenta.addActionListener(e -> {
            boolean winGame = game.coloringCells(colors.magenta);
            gameGraphics.updateField(game.getField());
            labelImg.setIcon(new ImageIcon(gameGraphics.getImg()));
            labelRealTimeCountNumber.setText(Integer.toString(game.getCountOfSteps()));

            if (winGame) {
                showWinMessage();
            }
        });

        buttonBlue.addActionListener(e -> {
            boolean winGame = game.coloringCells(colors.blue);
            gameGraphics.updateField(game.getField());
            labelImg.setIcon(new ImageIcon(gameGraphics.getImg()));
            labelRealTimeCountNumber.setText(Integer.toString(game.getCountOfSteps()));

            if (winGame) {
                showWinMessage();
            }
        });

        buttonGreen.addActionListener(e -> {
            boolean winGame = game.coloringCells(colors.green);
            gameGraphics.updateField(game.getField());
            labelImg.setIcon(new ImageIcon(gameGraphics.getImg()));
            labelRealTimeCountNumber.setText(Integer.toString(game.getCountOfSteps()));

            if (winGame) {
                showWinMessage();
            }
        });

        buttonYellow.addActionListener(e -> {
            boolean winGame = game.coloringCells(colors.yellow);
            gameGraphics.updateField(game.getField());
            labelImg.setIcon(new ImageIcon(gameGraphics.getImg()));
            labelRealTimeCountNumber.setText(Integer.toString(game.getCountOfSteps()));

            if (winGame) {
                showWinMessage();
            }
        });

        buttonRestartGame.addActionListener(e -> {
            gameGraphics.setSize((int) spinnerFieldSize.getValue());
            game.updateField((int) spinnerFieldSize.getValue());
            gameGraphics.updateField(game.getField());
            labelImg.setIcon(new ImageIcon(gameGraphics.getImg()));

            labelRealTimeCountNumber.setText("0");
        });
    }

    private void showWinMessage() {
        int size = (int) spinnerFieldSize.getValue();
        String winMessage = "Поздравляем, вы закрасили поле размером " +
                size + " * " + size +
                " за следующее количество шагов: " + labelRealTimeCountNumber.getText();
        SwingUtils.showInfoMessageBox(winMessage);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelMain = new JPanel();
        panelMain.setLayout(new GridLayoutManager(3, 4, new Insets(10, 10, 10, 10), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Размер треугольника:");
        panelMain.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Вложенность (кол-во уровней):");
        panelMain.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panelMain.add(spacer1, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panelMain.add(scrollPane1, new GridConstraints(2, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        labelImg = new JLabel();
        labelImg.setHorizontalAlignment(2);
        labelImg.setVerticalAlignment(1);
        scrollPane1.setViewportView(labelImg);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelMain;
    }

}
